{"version":3,"sources":["store/reducers.js","view/Routers/Routers.js","view/Routers/index.js","styles/resetStyles.js","App.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["reducers","history","combineReducers","router","connectRouter","Routers","react_default","a","createElement","Component","withRouter","connect","ResetStyles","createGlobalStyle","_templateObject","createBrowserHistory","store","middlewares","thunk","routerMiddleware","enhancers","composeWithDevTools","applyMiddleware","apply","createStore","createReducer","configureStore","App","es","esm","resetStyles","view_Routers","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAGeA,EAAA,SAACC,GAAD,OAAaC,0BAAgB,CAC1CC,OAAQC,YAAcH,0DCDHI,mLAGjB,OACEC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,0CAL6BC,aCEtBC,cAAWC,cAAUN,opCCHpC,IA6CeO,EA7CKC,YAAHC,KCQXb,EAAUc,cACVC,ECLS,SAAwBf,GACrC,IAAMgB,EAAc,CAACC,IAAOC,YAAiBlB,IACvCmB,EAAYC,8BAAoBC,kBAAeC,WAAf,EAAmBN,IACzD,OAAOO,sBAAYC,EAAcxB,GAAUmB,GDE/BM,CAAezB,GAYd0B,EAVH,kBACVrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAUZ,MAAOA,GACfV,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAiB5B,QAASA,GACxBK,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,SELcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.05dab034.chunk.js","sourcesContent":["import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nexport default (history) => combineReducers({\n  router: connectRouter(history)\n})","import React, { Component } from 'react'\n\n\nexport default class Routers extends Component {\n\n  render() { \n    return (\n      <section>\n        <h1>this is routers page</h1>\n      </section>\n    )\n  }\n}\n","import { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nimport Routers from './Routers'\n\nexport default withRouter(connect()(Routers))","import { createGlobalStyle } from 'styled-components'\n\nconst ResetStyles = createGlobalStyle`\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n`\n\nexport default ResetStyles","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\n\nimport configureStore from 'store/configureStore'\n\nimport Routers from 'view/Routers'\nimport ResetStyles from 'styles/resetStyles'\n\nconst history = createBrowserHistory()\nconst store = configureStore(history)\n\nconst App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <ResetStyles />\n      <Routers />\n    </ConnectedRouter>\n  </Provider>\n);\n\n\nexport default App;","import { applyMiddleware, createStore } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport createReducer from './reducers'\n \nexport default function configureStore(history) {\n  const middlewares = [thunk, routerMiddleware(history)];\n  const enhancers = composeWithDevTools(applyMiddleware(...middlewares));\n  return createStore(createReducer(history), enhancers)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}